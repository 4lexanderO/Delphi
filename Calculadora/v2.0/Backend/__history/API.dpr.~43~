program API;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  Horse,
  Horse.BasicAuthentication,
  Horse.Jhonson,
  System.SysUtils,
  StrUtils,
  JSON;

var
  App: THorse;

begin
  Writeln('Bem-vindo(a) à Calculadora API!');
  Writeln('');
  Writeln('Esse projeto tem por objetivo a prática do uso de criação de APIs Rest usando Horse, ');
  Writeln('e o consumo dela mesma manipulando JSON.');

  {$IFDEF DEBUG}
    ReportMemoryLeaksOnShutdown := True;
  {$ENDIF}


  App := THorse.Create;

  App.Use(HorseBasicAuthentication(
  function (const User, Password: string): boolean
  begin
    Result := User.Equals('User') and Password.Equals('Password');
  end));

  App.Use(Jhonson);

  App.Get('/ping',
  procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
  begin
    Res.Send('pong');
  end);

  App.Post('/somar',
  procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
  var
    LJSON: TJSONObject;
    Numero1, Numero2: double;
  begin
    LJSON := Req.Body<TJSONObject>.Clone as TJSONObject;

    Numero1 := LJSON.GetValue<Double>('numero1');
    Numero2 := LJSON.GetValue<Double>('numero2');

    LJSON.AddPair('resultado', (Numero1 + Numero2));

    Writeln('-------------------------');
    Writeln('Operação: Soma');
    Writeln('Numero 1: ' + Numero1.ToString);
    Writeln('Numero 2: ' + Numero2.ToString);
    Writeln('Resultado: ' + FloatToStr(Numero1 + Numero2));

    Res.Send<TJSONObject>(LJSON);
  end);

  App.Post('/subtrair',
  procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
  var
    LJSON: TJSONObject;
    Numero1, Numero2: Double;
  begin
    LJSON := Req.Body<TJSONObject>.Clone as TJSONObject;

    Numero1 := LJSON.GetValue<Double>('numero1');
    Numero2 := LJSON.GetValue<Double>('numero2');

    LJSON.AddPair('resultado', (Numero1 - Numero2));

    Writeln('-------------------------');
    Writeln('Operação: Subtração');
    Writeln('Numero 1: ' + Numero1.ToString);
    Writeln('Numero 2: ' + Numero2.ToString);
    Writeln('Resultado: ' + FloatToStr(Numero1 - Numero2));

    Res.Send<TJSONObject>(LJSON);
  end);


  App.Post('/dividir',
  procedure (Req: THorseRequest; Res: THorseResponse; Next: TProc)
  var
    LJSON: TJSONObject;
    Numero1, Numero2: Double;
  begin
    LJSON := Req.Body<TJSONObject>.Clone as TJSONObject;

    Numero1 := LJSON.GetValue<Double>('numero1');
    Numero2 := LJSON.GetValue<Double>('numero2');

    LJSON.AddPair('resultado', (Numero1 / Numero2));

    Writeln('-------------------------');
    Writeln('Operação: Divisão');
    Writeln('Numero 1: ' + Numero1.ToString);
    Writeln('Numero 2: ' + Numero2.ToString);
    Writeln('Resultado: ' + FloatToStr(Numero1 / Numero2));

    Res.Send<TJSONObject>(LJSON);
  end);

  App.Post('/multiplicar',
  procedure (Req: THorseRequest; Res: THorseResponse; Next: TProc)
  var
    LJSON: TJSONObject;
    Numero1, Numero2: Double;
  begin
    LJSON := Req.Body<TJSONObject>.Clone as TJSONObject;

    Numero1 := LJSON.GetValue<Double>('numero1');
    Numero2 := LJSON.GetValue<Double>('numero2');

    LJSON.AddPair('resultado', (Numero1 * Numero2));

    Writeln('-------------------------');
    Writeln('Operação: Multiplicação');
    Writeln('Numero 1: ' + Numero1.ToString);
    Writeln('Numero 2: ' + Numero2.ToString);
    Writeln('Resultado: ' + FloatToStr(Numero1 * Numero2));

    Res.Send<TJSONObject>(LJSON);
  end);

  App.Listen(9000);
end.
