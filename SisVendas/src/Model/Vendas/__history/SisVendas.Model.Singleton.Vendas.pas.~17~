unit SisVendas.Model.Singleton.Vendas;

interface

uses
  SisVendas.Interfaces.Cliente,
  SisVendas.Interfaces.Factory.Model.Cliente,
  System.Generics.Collections, System.SysUtils;

type
  TVendas = class
    private
      class var FInstance: TVendas;
      FClientes: TList<TCliente>;

      constructor Create;
      destructor Destroy; override;

      procedure SetCliente (Cliente: ICliente); overload;
      function GetCliente: ICliente; overload;
    public
      class function New: TVendas;
      class function NewInstance: TObject; override;
      property Cliente: ICliente read GetCliente write SetCliente;

  end;


implementation

{ TVendas }

{$REGION 'Construtores / Destrutores'}

constructor TVendas.Create;
begin
  FClientes := TList<ICliente>.Create;
end;

destructor TVendas.Destroy;
begin
  inherited;

  FreeAndNil(FClientes);
end;

class function TVendas.New: TVendas;
begin
  Result := Self.Create;
end;

class function TVendas.NewInstance: TObject;
begin
  if not Assigned(FInstance) then
    FInstance := TVendas(inherited NewInstance);

  Result := FInstance;
end;

{$ENDREGION}

procedure TVendas.SetCliente(Cliente: ICliente);
begin
  Self.FClientes.Add(Cliente);
end;

function TVendas.GetCliente: ICliente;
begin
  Result := FClientes[FClientes.Count];
end;

end.
