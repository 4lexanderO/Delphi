unit SisVendas.Model.DAO.Cliente;

interface

uses
  SisVendas.Interfaces.Cliente,
  System.Generics.Collections,
  System.SysUtils,
  IniFiles, System.Classes;

type
  TDAOCliente = class(TInterfacedObject, IDAOCliente)
    private
      FClientes: TList<ICliente>;

      constructor Create;
      destructor Destroy; override;
    public
      class function New: IDAOCliente;

      function Add(Cliente: ICliente): IDAOCliente;
      function Salvar: IDAOCliente;
  end;

implementation

{ TDAOCliente }

{$REGION 'Construtores / Destrutores'}

function TDAOCliente.Add(Cliente: ICliente): IDAOCliente;
begin
  FClientes.Add(Cliente);
  Result := Self;
end;

constructor TDAOCliente.Create;
begin
  FClientes := TList<ICliente>.Create;
end;

destructor TDAOCliente.Destroy;
begin
  inherited;
  FreeAndNil(FClientes);
end;

class function TDAOCliente.New: IDAOCliente;
begin
  Result := Self.Create;
end;

{$ENDREGION}

function TDAOCliente.Salvar: IDAOCliente;
var
  LArquivo: TStringList;
begin
  if Assigned(FClientes) then
    if FClientes.Count <= 0 then
      raise Exception.Create('Adicione um cliente para salvar!');

  LArquivo := TStringList.Create;
  try
    LArquivo.Add('--------------------');
    LArquivo.Add('Cadastro de Clientes');
    LArquivo.Add('--------------------');

    for var i: integer := 0 to FClientes.Count -1 do
    begin
      LArquivo.Add('Código:' + FClientes[i].Codigo.ToString);
      LArquivo.Add('Cliente:' + FClientes[i].Nome);
      LArquivo.Add('Idade:' + FClientes[i].Idade.ToString);
      LArquivo.Add('--------------------');
    end;

    LArquivo.SaveToFile(GetCurrentDir + '\Clientes.txt');
  finally
    FreeAndNil(LArquivo);
  end;

  Result := Self;
end;

end.
